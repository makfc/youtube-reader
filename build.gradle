// path to checkout of https://github.com/tensorflow/tensorflow
def tensorflowRepo = '/data/androidStudioProjects/tensorflow/'

// Default to building with Bazel and override with make if requested.
def nativeBuildRule = 'buildNativeBazel'
def inferenceLibPath = tensorflowRepo + '/bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so'

// If building with Bazel, this is the location of the bazel binary.
// NOTE: Bazel does not yet support building for Android on Windows,
// so in this case the Makefile build must be used as described above.
def bazelLocation = 'bazel'

project.buildDir = 'gradleBuild'
getProject().setBuildDir('gradleBuild')

// import DownloadModels task
project.ext.ASSET_DIR = projectDir.toString() + '/assets'
project.ext.TMP_DIR   = project.buildDir.toString() + '/downloads'

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    lintOptions {
        abortOnError false
    }

    def mainDir = "src/main"
    sourceSets {
        main {
            // TensorFlow Java API sources.
            java {
                srcDir tensorflowRepo + 'tensorflow/java/src/main/java'
                exclude '**/examples/**'
            }

            // Android TensorFlow wrappers, etc.
            java {
                srcDir tensorflowRepo + 'tensorflow/contrib/android/java'
            }

            java.srcDir 'src/main/java'
            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src/main/res']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = [project.ext.ASSET_DIR]
            jniLibs.srcDirs = ['libs']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    defaultConfig {
        applicationId "com.vackosar.youtubereader"
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'commons-lang:commons-lang:2.3'
    testCompile 'junit:junit:4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    compile 'org.tensorflow:tensorflow-android:1.13.1'
}

task buildNativeBazel() {
    doLast {
        buildNativeBazelForCpu('x86', tensorflowRepo, bazelLocation, inferenceLibPath)
        buildNativeBazelForCpu('armeabi', tensorflowRepo, bazelLocation, inferenceLibPath)
        buildNativeBazelForCpu('armeabi-v7a', tensorflowRepo, bazelLocation, inferenceLibPath)
    }
}

def buildNativeBazelForCpu(String cpu, tensorflowRepo, bazelLocation, inferenceLibPath) {
    def libDir = System.getProperty("user.dir") + "/libs"
    if (!file(libDir + "/" + cpu + "/libtensorflow_inference.so").exists()) {
        exec {
            workingDir tensorflowRepo
            commandLine bazelLocation, 'build', '-c', 'opt', 'tensorflow/examples/android:tensorflow_native_libs', '--crosstool_top=//external:android/crosstool', '--cpu=' + cpu, '--host_crosstool_top=@bazel_tools//tools/cpp:toolchain'
        }
        exec {
            workingDir tensorflowRepo
            commandLine "mkdir", "-p", libDir + "/" + cpu
        }
        exec {
            workingDir tensorflowRepo
            commandLine 'cp', "-f", inferenceLibPath, libDir + "/" + cpu
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.dependsOn nativeBuildRule
    }
    if (task.name == 'assembleRelease') {
        task.dependsOn nativeBuildRule
    }
}

// Download default models; if you wish to use your own models then
// place them in the "assets" directory and comment out this line.
//apply from: "download-models.gradle"

